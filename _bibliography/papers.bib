---
---

@string{aps = {American Physical Society,}}

@article{10.1145/3597503.3639117,
author = {Sun, Yuqiang and Wu, Daoyuan and Xue, Yue and Liu, Han and Wang, Haijun and Xu, Zhengzi and Xie, Xiaofei and Liu, Yang},
title = {GPTScan: Detecting Logic Vulnerabilities in Smart Contracts by Combining GPT with Program Analysis},
year = {2024},
isbn = {9798400702174},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3597503.3639117},
doi = {10.1145/3597503.3639117},
abstract = {Smart contracts are prone to various vulnerabilities, leading to substantial financial losses over time. Current analysis tools mainly target vulnerabilities with fixed control- or data-flow patterns, such as re-entrancy and integer overflow. However, a recent study on Web3 security bugs revealed that about 80\% of these bugs cannot be audited by existing tools due to the lack of domain-specific property description and checking. Given recent advances in Large Language Models (LLMs), it is worth exploring how Generative Pre-training Transformer (GPT) could aid in detecting logic vulnerabilities.In this paper, we propose GPTScan, the first tool combining GPT with static analysis for smart contract logic vulnerability detection. Instead of relying solely on GPT to identify vulnerabilities, which can lead to high false positives and is limited by GPT's pre-trained knowledge, we utilize GPT as a versatile code understanding tool. By breaking down each logic vulnerability type into scenarios and properties, GPTScan matches candidate vulnerabilities with GPT. To enhance accuracy, GPTScan further instructs GPT to intelligently recognize key variables and statements, which are then validated by static confirmation. Evaluation on diverse datasets with around 400 contract projects and 3K Solidity files shows that GPTScan achieves high precision (over 90\%) for token contracts and acceptable precision (57.14\%) for large projects like Web3Bugs. It effectively detects ground-truth logic vulnerabilities with a recall of over 70\%, including 9 new vulnerabilities missed by human auditors. GPTScan is fast and cost-effective, taking an average of 14.39 seconds and 0.01 USD to scan per thousand lines of Solidity code. Moreover, static confirmation helps GPTScan reduce two-thirds of false positives.},
booktitle = {Proceedings of the IEEE/ACM 46th International Conference on Software Engineering},
articleno = {166},
numpages = {13},
location = {Lisbon, Portugal},
series = {ICSE '24},
selected = {true},
preview = {gptscan.png},
abbr = {ICSE '24},
level = {CCF-A}
}

@article{sun2025llm4vulnunifiedevaluationframework,
      title={LLM4Vuln: A Unified Evaluation Framework for Decoupling and Enhancing LLMs' Vulnerability Reasoning}, 
      author={Yuqiang Sun and Daoyuan Wu and Yue Xue and Han Liu and Wei Ma and Lyuye Zhang and Yang Liu and Yingjiu Li},
      year={2025},
      eprint={2401.16185},
      archivePrefix={arXiv},
      primaryClass={cs.CR},
      url={https://arxiv.org/abs/2401.16185},
      abbr = {arXiv '25},
}

@article {ma2025combining,
author = { Ma, Wei and Wu, Daoyuan and Sun, Yuqiang and Wang, Tianwen and Liu, Shangqing and Zhang, Jian and Xue, Yue and Liu, Yang },
booktitle = { 2025 IEEE/ACM 47th International Conference on Software Engineering (ICSE) },
title = {{ Combining Fine-tuning and LLM-based Agents for Intuitive Smart Contract Auditing with Justifications }},
year = {2025},
volume = {},
ISSN = {1558-1225},
pages = {330-342},
abstract = { Smart contracts are decentralized applications built atop blockchains like Ethereum. Recent research has shown that large language models (LLMs) have potential in auditing smart contracts, but the state-of-the-art indicates that even GPT-4 can achieve only 30% precision (when both decision and justification are correct). This is likely because off-the-shelf LLMs were primarily pre-trained on a general text/code corpus and not fine-tuned on the specific domain of Solidity smart contract auditing. In this paper, we propose iAudit, a general framework that combines fine-tuning and LLM-based agents for intuitive smart contract auditing with justifications. Specifically, iAudit is inspired by the observation that expert human auditors first perceive what could be wrong and then perform a detailed analysis of the code to identify the cause. As such, iAudit employs a two-stage fine-tuning approach: it first tunes a Detector model to make decisions and then tunes a Reasoner model to generate causes of vulnerabilities. However, fine-tuning alone faces challenges in accurately identifying the optimal cause of a vulnerability. Therefore, we introduce two LLM-based agents, the Ranker and Critic, to iteratively select and debate the most suitable cause of vulnerability based on the output of the fine-tuned Reasoner model. To evaluate iAudit, we collected a balanced dataset with 1,734 positive and 1,810 negative samples to fine-tune iAudit. We then compared it with traditional fine-tuned models (CodeBERT, GraphCodeBERT, CodeT5, and UnixCoder) as well as prompt learning-based LLMs (GPT4, GPT-3.5, and CodeLlama-13b/34b). On a dataset of 263 real smart contract vulnerabilities, iAudit achieves an F1 score of 91.21% and an accuracy of 91.11%. The causes generated by iAudit achieved a consistency of about 38% compared to the ground truth causes. },
keywords = {Smart Contract;Vulnerability Detection;Fine-tuning;LLM;Agent},
doi = {10.1109/ICSE55347.2025.00027},
url = {https://doi.ieeecomputersociety.org/10.1109/ICSE55347.2025.00027},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month =May,
abbr = {ICSE '25},
level = {CCF-A}
}

@article{liu2025propertygpt,
  title={PropertyGPT: LLM-driven Formal Verification of Smart Contracts through Retrieval-Augmented Property Generation},
  author={Liu, Ye and Xue, Yue and Wu, Daoyuan and Sun, Yuqiang and Li, Yi and Shi, Miaolei and Liu, Yang},
  booktitle={32nd Annual Network and Distributed System Security Symposium},
  series={NDSS 2025},
  year={2025},
  doi={10.14722/ndss.2025.241357},
  abstract={With recent advances in large language models (LLMs), this paper explores the potential of leveraging state-of-the-art LLMs,such as GPT-4, to transfer existing human-written properties (e.g.,those from Certora auditing reports) and automatically generate customized properties for unknown code. To this end, we embed existing properties into a vector database and retrieve a reference property for LLM-based in-context learning to generate a new property for a given code. While this basic process is relatively straightforward, ensuring that the generated properties are (i) compilable, (ii) appropriate, and (iii) verifiable presents challenges. To address (i), we use the compilation and static analysis feedback as an external oracle to guide LLMs in iteratively revising the generated properties. For (ii), we consider multiple dimensions of similarity to rank the properties and employ a weighted algorithm to identify the top-K properties as the final result. For (iii), we design a dedicated prover to formally verify the correctness of the generated properties. We have implemented these strategies into a novel LLM-based property generation tool called PropertyGPT. Our experiments show that PropertyGPT can generate comprehensive and high-quality properties, achieving an 80% recall compared to the ground truth. It successfully detected 26 CVEs/attack incidents out of 37 tested and also uncovered 12 zero-day vulnerabilities, leading to $8,256 in bug bounty rewards.},
  keywords={Software Engineering (cs.SE), Artificial Intelligence (cs.AI)},
  archivePrefix={arXiv},
  eprint={2405.02580},
  primaryClass={cs.SE},
  annotation={* Equal contribution},
  url={https://arxiv.org/abs/2405.02580},
  note={Accepted by NDSS Symposium 2025},
  selected = {true},
  abbr = {NDSS '25},
  level = {CCF-A},
  award = {true},
  award_name = {NDSS Distinguished Paper Award}
}

@article{10.1145/3660772,
author = {Li, Kaixuan and Xue, Yue and Chen, Sen and Liu, Han and Sun, Kairan and Hu, Ming and Wang, Haijun and Liu, Yang and Chen, Yixiang},
title = {Static Application Security Testing (SAST) Tools for Smart Contracts: How Far Are We?},
year = {2024},
issue_date = {July 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {1},
number = {FSE},
url = {https://doi.org/10.1145/3660772},
doi = {10.1145/3660772},
journal = {Proc. ACM Softw. Eng.},
month = jul,
articleno = {65},
numpages = {24},
keywords = {Benchmarks, Empirical study, Static application security testing},
selected = {true},
abbr = {FSE '24},
level = {CCF-A},
award = {true},
award_name = {ACM SIGSOFT Distinguished Paper Award}
}

@article{cmes.2023.031488,
author = {Xue, Yue and Fan, Dunqiu and Shen, Su and Fu, Jialu and Hu, Ning and Liu, Wenmao and Tian, Zhihong},
title = {A Review on the Security of the Ethereum-Based DeFi Ecosystem},
journal = {Computer Modeling in Engineering \& Sciences},
volume = {139},
year = {2024},
number = {1},
pages = {69--101},
url = {http://www.techscience.com/CMES/v139n1/55116},
issn = {1526-1506},
selected = {true},
abstract = {Decentralized finance (DeFi) is a general term for a series of financial products and services. It is based on blockchain technology and has attracted people's attention because of its open, transparent, and intermediary free. Among them, the DeFi ecosystem based on Ethereum-based blockchains attracts the most attention. However, the current decentralized financial system built on the Ethereum architecture has been exposed to many smart contract vulnerabilities during the last few years. Herein, we believe it is time to improve the understanding of the prevailing Ethereum-based DeFi ecosystem security issues. To that end, we investigate the Ethereum-based DeFi security issues: 1) inherited from the real-world financial system, which can be solved by macro-control; 2) induced by the problems of blockchain architecture, which require a better blockchain platform; 3) caused by DeFi invented applications, which should be focused on during the project development. Based on that, we further discuss the current solutions and potential directions of DeFi security. According to our research, we could provide a comprehensive vision to the research community for the improvement of Ethereum-based DeFi ecosystem security.},
doi = {10.32604/cmes.2023.031488},
abbr = {CMES '24},
level = {JCR-2}
}

@article{10.1007/978-3-031-06764-8_25,
author="Xue, Yue
and Fu, Jialu
and Su, Shen
and Bhuiyan, Zakirul Alam
and Qiu, Jing
and Lu, Hui
and Hu, Ning
and Tian, Zhihong",
editor="Sun, Xingming
and Zhang, Xiaorui
and Xia, Zhihua
and Bertino, Elisa",
title="Preventing Price Manipulation Attack by Front-Running",
booktitle="Advances in Artificial Intelligence and Security",
year="2022",
publisher="Springer International Publishing",
address="Cham",
pages="309--322",
selected = {true},
abstract="Decentralized finance (DeFi), as one of the fastest growing directions in the field of decentralized applications based on blockchain and smart contract in the past two years, has attracted many participants and institutional investments, and represents a series of decentralized financial projects in the blockchain ecosystem behind it. The most noteworthy one is the Flash-loan based Price Manipulation Attack, which uses a series of new features of DeFi such as flash loan and liquidity pool, and the attack is complex and diverse, leading to the inability of traditional smart contract vulnerability mining means to effectively. In this work, we focus on detecting flash loan-based price manipulation attacks on DeFi applications, which exploit the DeFi project's simple inquiry mechanism to gain large profits by manipulating users' crypto asset prices. To this end, we propose a detector embedded in the blockchain client to detect whether the user's crypto asset price is manipulated by monitoring the transaction execution process in real time, and innovatively propose the use of a front-running attack for remediation based on the amount of profit made by the attacker, solving the problem that the relevant attack can only be detected but not defended against, and reducing the possible financial loss to the DeFi project.",
isbn="978-3-031-06764-8",
abbr = {AAIS '22},
}

@article{10271831,
  author={Su, Shen and Tan, Yuntian and Xue, Yue and Wang, Chao and Lu, Hui and Tian, Zhihong and Shan, Chun and Du, Xiaojiang},
  booktitle={2023 IEEE International Conference on Metaverse Computing, Networking and Applications (MetaCom)}, 
  title={Detecting Smart Contract Project Anomalies in Metaverse}, 
  year={2023},
  volume={},
  number={},
  pages={524-532},
  keywords={Solid modeling;Codes;Runtime;Metaverse;Smart contracts;Virtual reality;Transforms;metaverse;smart contract project;anomaly;message call;graph neural network},
  doi={10.1109/MetaCom57706.2023.00095},
  abbr = {MetaCom '23},
}

@article{10437641,
  author={Su, Shen and Xue, Yue and Lin, Liansheng and Wang, Chao and Lu, Hui and Qiu, Jing and Sun, Yanbin and Liu, Yuan and Tian, Zhihong},
  booktitle={GLOBECOM 2023 - 2023 IEEE Global Communications Conference}, 
  title={Smart Contract Firewall: Protecting the on-Chain Smart Contract Projects}, 
  year={2023},
  volume={},
  number={},
  pages={5122-5128},
  keywords={Costs;Firewalls (computing);Filtering;Smart contracts;Real-time systems;Security;Testing;smart contract firewall;vulnerability;gas;patch;malicious transaction},
  doi={10.1109/GLOBECOM54140.2023.10437641},
  selected = {true},
  abbr = {GLOBECOM '23},
  level = {CCF-C}
}

@article{kong2025smartcontractfuzzingprofitable,
      title={Smart Contract Fuzzing Towards Profitable Vulnerabilities}, 
      author={Ziqiao Kong and Cen Zhang and Maoyi Xie and Ming Hu and Yue Xue and Ye Liu and Haijun Wang and Yang Liu},
      year={2025},
      eprint={2501.08834},
      archivePrefix={arXiv},
      primaryClass={cs.CR},
      url={https://arxiv.org/abs/2501.08834},
      abbr = {FSE '25},
      selected = {true},
      level = {CCF-A}
}

@article{10.1145/3650212.3652137,
author = {Xie, Maoyi and Hu, Ming and Kong, Ziqiao and Zhang, Cen and Feng, Yebo and Wang, Haijun and Xue, Yue and Zhang, Hao and Liu, Ye and Liu, Yang},
title = {DeFort: Automatic Detection and Analysis of Price Manipulation Attacks in DeFi Applications},
year = {2024},
isbn = {9798400706127},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3650212.3652137},
doi = {10.1145/3650212.3652137},
abstract = {Although Decentralized Finance (DeFi) applications facilitate tamper-proof transactions among multiple anonymous users, since attackers can access the smart contract bytecode directly, vulnerabilities in the transaction mechanism, contract code, or third-party components can be easily exploited to manipulate token prices, leading to financial losses. Since price manipulation often relies on specific states and complex trading sequences, existing detection tools have limitations in addressing this problem. In addition, to swiftly identify the root cause of an attack and implement targeted defense and remediation measures, auditors typically prioritize understanding the methodology behind the attack, emphasizing 'how' it occurred rather than simply confirming its existence. To address these problems, this paper presents a novel automatic price manipulation detection and analysis framework, named DeFort, which contains a price manipulation behavior model to guide on-chain detection, multiple price monitoring strategies to detect pools with abnormal token prices, and various profit calculation mechanisms to confirm attacks. Based on behavioral models, DeFort can automatically locate transactions and functions that cause abnormal price fluctuations and identify attackers and victims. Experimental results demonstrate that DeFort can outperform state-of-the-art price manipulation detection methods. Furthermore, after monitoring 441 real-world projects for two months, DeFort successfully detected five price manipulation attacks.},
booktitle = {Proceedings of the 33rd ACM SIGSOFT International Symposium on Software Testing and Analysis},
pages = {402–414},
numpages = {13},
keywords = {blockchain, decentralized finance (DeFi), price manipulation attack, smart contract},
location = {Vienna, Austria},
series = {ISSTA 2024},
selected = {true},
abbr = {ISSTA '24},
level = {CCF-A}
}
